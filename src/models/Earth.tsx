/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Jacobs Development (https://sketchfab.com/Jacobs_Development)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-planet-earth-7b1dc4f802a54a6297e7a46888a85f77
Title: Low Poly Planet Earth
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import EarthScene from '../assets/3d/earth.glb'
import { a } from '@react-spring/three'

const Earth = (props : any) => {
  const { nodes, materials } = useGLTF(EarthScene) as any
  const { isRotating, setIsRotating, setCurrentStage } = props;

  const earthRef = useRef(null); 

  const { gl, viewport } = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e: any) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
    ? e.touches[0].clientX 
    : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e: any) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e: any) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating){
      const clientX = e.touches 
      ? e.touches[0].clientX 
      : e.clientX;
      
      const delta = (clientX - lastX.current) / viewport.width;
      
      earthRef.current.rotation.y += delta * 0.004 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.004 * Math.PI;
    }

  }

  const handleKeyDown = (e: any) => {
    if(e.key === "ArrowLeft") {
      if(!isRotating) setIsRotating(true);
      earthRef.current.rotation.y += 0.010 * Math.PI;
      rotationSpeed.current = 0.008;
    }else if (e.key === "ArrowRight") {
      if(!isRotating) setIsRotating(true);
      earthRef.current.rotation.y -= 0.010 * Math.PI;
      rotationSpeed.current = -0.008;
    }
  }

  const handleKeyUp = (e: any) => {
  if(e.key === "ArrowLeft" || e.key === "ArrowRight") {
    setIsRotating(false);
  }
  }

  useFrame(() => {
    if(!isRotating){
      rotationSpeed.current *= dampingFactor;
      if(Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      earthRef.current.rotation.y += rotationSpeed.current;
    }else {
      const rotation = earthRef.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 3.5 && normalizedRotation <= 4.8:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 5.1 && normalizedRotation <= 6.5:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 0.8 && normalizedRotation <= 1.5:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 2.2 && normalizedRotation <= 3.2:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }


  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.style.touchAction = 'none';
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
  
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
      canvas.style.touchAction = '';
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={earthRef} {...props}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_Planet_0.geometry}
        material={materials.Planet}
        rotation={[Math.PI, 0, Math.PI]}
      />
    </a.group>
  )
}

useGLTF.preload(EarthScene)


export default Earth
